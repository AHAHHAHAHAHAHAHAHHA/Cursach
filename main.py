import telebot
import time
import requests
import json

bot = telebot.TeleBot('7030847910:AAG76nvYEyIgpvbzXtysXubyuVaRYA8puhU')

nodes = ['http://192.168.1.37:5001', 'http://192.168.1.37:5002', 'http://192.168.1.37:5003']

weather_codes = {
    0.0: "–ß–∏—Å—Ç–µ –Ω–µ–±–æ",
    **dict.fromkeys([1.0, 2.0, 3.0], "–ü–µ—Ä–µ–≤–∞–∂–Ω–æ —è—Å–Ω–æ, –º—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å, –ø–æ—Ö–º—É—Ä–æ"),
    **dict.fromkeys([45.0, 48.0], "–¢—É–º–∞–Ω. –£—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É–º–∞–Ω—É"),
    **dict.fromkeys([51.0, 53.0, 55.0], "–ú—Ä—è–∫–∞: —Å–ª–∞–±–∫–∞, –ø–æ–º—ñ—Ä–Ω–∞ —Ç–∞ –≥—É—Å—Ç–∞"),
    **dict.fromkeys([56.0, 57.0], "–ö—Ä–∏–∂–∞–Ω–∏–π –¥–æ—â: –ª–µ–≥–∫–∏–π —ñ —â—ñ–ª—å–Ω–∏–π"),
    **dict.fromkeys([80.0, 81.0, 82.0], "–î–æ—â: –∑ –ø–æ–º—ñ—Ä–Ω–∏–º –≤—ñ—Ç—Ä–æ–º")
}

# –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –í–∞—à–∏ –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –∫–æ–¥–∞.
connect1 = telebot.types.InlineKeyboardButton(text='1', callback_data='connect1')
connect2 = telebot.types.InlineKeyboardButton(text='2', callback_data='connect2')
connect3 = telebot.types.InlineKeyboardButton(text='3', callback_data='connect3')

weather = telebot.types.InlineKeyboardButton(text='–ü–æ–≥–æ–¥–∞', callback_data='weather')
get_chain = telebot.types.InlineKeyboardButton(text='–õ–∞–Ω—Ü—é–≥', callback_data='get_chain')
change_node = telebot.types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –ù–æ–¥—É', callback_data='change_node')
exit_btn = telebot.types.InlineKeyboardButton(text='–í–∏–π—Ç–∏', callback_data='exit')

markup = telebot.types.InlineKeyboardMarkup([[ connect1, connect2, connect3 ]])

markup1 = telebot.types.InlineKeyboardMarkup([[ weather, get_chain, change_node ], [exit_btn]])

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "‚òÅÔ∏è*–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö*‚òÅÔ∏è\n\n"
                                      "–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –ø—Ä–æ–≥—Ä–∞–º–æ—é, –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –æ–¥–Ω—ñ—î—ó –∑ –Ω–∏–∂—á–µ –Ω–∞–¥–∞–Ω–∏—Ö –Ω–æ–¥:\n\n"
                                      f"*1)* - {nodes[0]}üü¢\n"
                                      f"*2)* - {nodes[1]}üü¢\n"
                                      f"*3)* - {nodes[2]}üü¢", reply_markup=markup, parse_mode="Markdown")

url = ''
@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    global url
    if call.data == 'connect1':
        msg = bot.send_message(call.message.chat.id, "–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!\n"
                                                     "–ü—ñ–¥'—î–¥–Ω—É—é—Å—å –¥–æ –Ω–æ–¥–∏ ‚Ññ5001...")
        url += nodes[0]
        time.sleep(2)
        bot.delete_message(call.message.chat.id, message_id=msg.message_id)

        bot.send_message(call.message.chat.id, "–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –ù–æ–¥–∏ ‚Ññ5001ü•≥\n\n"
                                               "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É", reply_markup=markup1)
    elif call.data == 'connect2':
        msg = bot.send_message(call.message.chat.id, "–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!\n"
                                                     "–ü—ñ–¥'—î–¥–Ω—É—é—Å—å –¥–æ –Ω–æ–¥–∏ ‚Ññ5002...")
        url = nodes[0]
        time.sleep(2)
        bot.delete_message(call.message.chat.id, message_id=msg.message_id)

        bot.send_message(call.message.chat.id, "–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –ù–æ–¥–∏ ‚Ññ5002ü•≥\n\n"
                                               "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É", reply_markup=markup1)
    elif call.data == 'connect3':
        msg = bot.send_message(call.message.chat.id, "–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!\n"
                                                     "–ü—ñ–¥'—î–¥–Ω—É—é—Å—å –¥–æ –Ω–æ–¥–∏ ‚Ññ5003...")
        url = nodes[0]
        time.sleep(2)
        bot.delete_message(call.message.chat.id, message_id=msg.message_id)

        bot.send_message(call.message.chat.id, "–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –ù–æ–¥–∏ ‚Ññ5003ü•≥\n\n"
                                               "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É", reply_markup=markup1)
    elif call.data == 'weather':
        print(url)
        response = requests.get(f"{url}/mining_block").text
        data_received = json.loads(response)

        code = data_received["data"][0]["block_data"]["weather_code"]
        coordinates = data_received["data"][0]["block_data"]["coordinates"]
        timestamp = data_received["timestamp"]
        message = ("–ü–æ–≥–æ–¥–∞ –≤ –ö–∏—î–≤—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
                   f"({coordinates[0]}, {coordinates[1]})\n"
                   f"{weather_codes[code]}\n"
                   f"{timestamp[:-7]}")

        bot.send_message(call.message.chat.id, message, reply_markup=markup1)
    elif call.data == 'get_chain':
        requests.get(f"{url}/replace_chain")
        response = requests.get(f"{url}/get_chain").text
        data_received = json.loads(response)['chain']
        if len(data_received) == 1:
            bot.send_message(call.message.chat.id, "*–í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –õ–∞–Ω—Ü—é–≥—É*", parse_mode="Markdown")

        message = '*–ü–æ–≥–æ–¥–∞ –≤ –ö–∏—î–≤—ñ*\n\n'
        counter = 1
        for block in data_received:
            if block['data'] == []:
                continue
            code = block["data"][0]["block_data"]["weather_code"]
            coordinates = block["data"][0]["block_data"]["coordinates"]
            timestamp = block["timestamp"]
            message += (f"*{counter})* {coordinates[0], coordinates[1]}\n"
                        f"{weather_codes[code]}\n"
                        f"{timestamp}\n\n")
            counter += 1
        bot.send_message(call.message.chat.id, message, reply_markup=markup1, parse_mode="Markdown")

    elif call.data == 'change_node':
        bot.send_message(call.message.chat.id, "‚ö°*–ó–º—ñ–Ω–∞ –ù–æ–¥–∏*‚ö°\n\n"
                                                "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–∞—Ä–∞–∑—ñ –Ω–æ–¥:\n\n"
                                                f"*1)* - {nodes[0]}üü¢\n"
                                                f"*2)* - {nodes[1]}üü¢\n"
                                                f"*3)* - {nodes[2]}üü¢", reply_markup=markup, parse_mode="Markdown")

    elif call.data == 'exit':
        bot.send_message(call.message.chat.id, "üî¥*–í–∏—Ö—ñ–¥ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ*üî¥", parse_mode="Markdown")
        exit()




if __name__ == '__main__':
    # schedule.every().day.at('22:11').do(send_message)
    # Thread(target=schedule_checker).start()
    bot.polling(none_stop=True)
